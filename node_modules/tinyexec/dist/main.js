import { createRequire as __tinyexec_cr } from "node:module";const require = __tinyexec_cr(import.meta.url);
var Ct = Object.create;
var R = Object.defineProperty;
var St = Object.getOwnPropertyDescriptor;
var kt = Object.getOwnPropertyNames;
var Tt = Object.getPrototypeOf, At = Object.prototype.hasOwnProperty;
var m = /* @__PURE__ */ ((t) => typeof require < "u" ? require : typeof Proxy < "u" ? new Proxy(t, {
  get: (e, n) => (typeof require < "u" ? require : e)[n]
}) : t)(function(t) {
  if (typeof require < "u") return require.apply(this, arguments);
  throw Error('Dynamic require of "' + t + '" is not supported');
});
var l = (t, e) => () => (e || t((e = { exports: {} }).exports, e), e.exports);
var Rt = (t, e, n, r) => {
  if (e && typeof e == "object" || typeof e == "function")
    for (let s of kt(e))
      !At.call(t, s) && s !== n && R(t, s, { get: () => e[s], enumerable: !(r = St(e, s)) || r.enumerable });
  return t;
};
var $t = (t, e, n) => (n = t != null ? Ct(Tt(t)) : {}, Rt(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  e || !t || !t.__esModule ? R(n, "default", { value: t, enumerable: !0 }) : n,
  t
));

// node_modules/isexe/windows.js
var z = l((Ce, H) => {
  "use strict";
  H.exports = F;
  F.sync = zt;
  var L = m("fs");
  function Ht(t, e) {
    var n = e.pathExt !== void 0 ? e.pathExt : process.env.PATHEXT;
    if (!n || (n = n.split(";"), n.indexOf("") !== -1))
      return !0;
    for (var r = 0; r < n.length; r++) {
      var s = n[r].toLowerCase();
      if (s && t.substr(-s.length).toLowerCase() === s)
        return !0;
    }
    return !1;
  }
  function j(t, e, n) {
    return !t.isSymbolicLink() && !t.isFile() ? !1 : Ht(e, n);
  }
  function F(t, e, n) {
    L.stat(t, function(r, s) {
      n(r, r ? !1 : j(s, t, e));
    });
  }
  function zt(t, e) {
    return j(L.statSync(t), t, e);
  }
});

// node_modules/isexe/mode.js
var B = l((Se, M) => {
  "use strict";
  M.exports = D;
  D.sync = Wt;
  var W = m("fs");
  function D(t, e, n) {
    W.stat(t, function(r, s) {
      n(r, r ? !1 : K(s, e));
    });
  }
  function Wt(t, e) {
    return K(W.statSync(t), e);
  }
  function K(t, e) {
    return t.isFile() && Dt(t, e);
  }
  function Dt(t, e) {
    var n = t.mode, r = t.uid, s = t.gid, o = e.uid !== void 0 ? e.uid : process.getuid && process.getuid(), i = e.gid !== void 0 ? e.gid : process.getgid && process.getgid(), u = parseInt("100", 8), c = parseInt("010", 8), a = parseInt("001", 8), f = u | c, p = n & a || n & c && s === i || n & u && r === o || n & f && o === 0;
    return p;
  }
});

// node_modules/isexe/index.js
var G = l((Te, X) => {
  "use strict";
  var ke = m("fs"), w;
  process.platform === "win32" || global.TESTING_WINDOWS ? w = z() : w = B();
  X.exports = b;
  b.sync = Kt;
  function b(t, e, n) {
    if (typeof e == "function" && (n = e, e = {}), !n) {
      if (typeof Promise != "function")
        throw new TypeError("callback not provided");
      return new Promise(function(r, s) {
        b(t, e || {}, function(o, i) {
          o ? s(o) : r(i);
        });
      });
    }
    w(t, e || {}, function(r, s) {
      r && (r.code === "EACCES" || e && e.ignoreErrors) && (r = null, s = !1), n(r, s);
    });
  }
  function Kt(t, e) {
    try {
      return w.sync(t, e || {});
    } catch (n) {
      if (e && e.ignoreErrors || n.code === "EACCES")
        return !1;
      throw n;
    }
  }
});

// node_modules/which/which.js
var tt = l((Ae, Z) => {
  "use strict";
  var g = process.platform === "win32" || process.env.OSTYPE === "cygwin" || process.env.OSTYPE === "msys", U = m("path"), Mt = g ? ";" : ":", Y = G(), V = (t) => Object.assign(new Error(`not found: ${t}`), { code: "ENOENT" }), J = (t, e) => {
    let n = e.colon || Mt, r = t.match(/\//) || g && t.match(/\\/) ? [""] : [
      // windows always checks the cwd first
      ...g ? [process.cwd()] : [],
      ...(e.path || process.env.PATH || /* istanbul ignore next: very unusual */
      "").split(n)
    ], s = g ? e.pathExt || process.env.PATHEXT || ".EXE;.CMD;.BAT;.COM" : "", o = g ? s.split(n) : [""];
    return g && t.indexOf(".") !== -1 && o[0] !== "" && o.unshift(""), {
      pathEnv: r,
      pathExt: o,
      pathExtExe: s
    };
  }, Q = (t, e, n) => {
    typeof e == "function" && (n = e, e = {}), e || (e = {});
    let { pathEnv: r, pathExt: s, pathExtExe: o } = J(t, e), i = [], u = (a) => new Promise((f, p) => {
      if (a === r.length)
        return e.all && i.length ? f(i) : p(V(t));
      let d = r[a], v = /^".*"$/.test(d) ? d.slice(1, -1) : d, h = U.join(v, t), x = !v && /^\.[\\\/]/.test(t) ? t.slice(0, 2) + h : h;
      f(c(x, a, 0));
    }), c = (a, f, p) => new Promise((d, v) => {
      if (p === s.length)
        return d(u(f + 1));
      let h = s[p];
      Y(a + h, { pathExt: o }, (x, Ot) => {
        if (!x && Ot)
          if (e.all)
            i.push(a + h);
          else
            return d(a + h);
        return d(c(a, f, p + 1));
      });
    });
    return n ? u(0).then((a) => n(null, a), n) : u(0);
  }, Bt = (t, e) => {
    e = e || {};
    let { pathEnv: n, pathExt: r, pathExtExe: s } = J(t, e), o = [];
    for (let i = 0; i < n.length; i++) {
      let u = n[i], c = /^".*"$/.test(u) ? u.slice(1, -1) : u, a = U.join(c, t), f = !c && /^\.[\\\/]/.test(t) ? t.slice(0, 2) + a : a;
      for (let p = 0; p < r.length; p++) {
        let d = f + r[p];
        try {
          if (Y.sync(d, { pathExt: s }))
            if (e.all)
              o.push(d);
            else
              return d;
        } catch {
        }
      }
    }
    if (e.all && o.length)
      return o;
    if (e.nothrow)
      return null;
    throw V(t);
  };
  Z.exports = Q;
  Q.sync = Bt;
});

// node_modules/path-key/index.js
var nt = l((Re, y) => {
  "use strict";
  var et = (t = {}) => {
    let e = t.env || process.env;
    return (t.platform || process.platform) !== "win32" ? "PATH" : Object.keys(e).reverse().find((r) => r.toUpperCase() === "PATH") || "Path";
  };
  y.exports = et;
  y.exports.default = et;
});

// node_modules/cross-spawn/lib/util/resolveCommand.js
var it = l(($e, ot) => {
  "use strict";
  var rt = m("path"), Xt = tt(), Gt = nt();
  function st(t, e) {
    let n = t.options.env || process.env, r = process.cwd(), s = t.options.cwd != null, o = s && process.chdir !== void 0 && !process.chdir.disabled;
    if (o)
      try {
        process.chdir(t.options.cwd);
      } catch {
      }
    let i;
    try {
      i = Xt.sync(t.command, {
        path: n[Gt({ env: n })],
        pathExt: e ? rt.delimiter : void 0
      });
    } catch {
    } finally {
      o && process.chdir(r);
    }
    return i && (i = rt.resolve(s ? t.options.cwd : "", i)), i;
  }
  function Ut(t) {
    return st(t) || st(t, !0);
  }
  ot.exports = Ut;
});

// node_modules/cross-spawn/lib/util/escape.js
var ct = l((Ne, P) => {
  "use strict";
  var _ = /([()\][%!^"`<>&|;, *?])/g;
  function Yt(t) {
    return t = t.replace(_, "^$1"), t;
  }
  function Vt(t, e) {
    return t = `${t}`, t = t.replace(/(\\*)"/g, '$1$1\\"'), t = t.replace(/(\\*)$/, "$1$1"), t = `"${t}"`, t = t.replace(_, "^$1"), e && (t = t.replace(_, "^$1")), t;
  }
  P.exports.command = Yt;
  P.exports.argument = Vt;
});

// node_modules/shebang-regex/index.js
var ut = l((qe, at) => {
  "use strict";
  at.exports = /^#!(.*)/;
});

// node_modules/shebang-command/index.js
var pt = l((Ie, lt) => {
  "use strict";
  var Jt = ut();
  lt.exports = (t = "") => {
    let e = t.match(Jt);
    if (!e)
      return null;
    let [n, r] = e[0].replace(/#! ?/, "").split(" "), s = n.split("/").pop();
    return s === "env" ? r : r ? `${s} ${r}` : s;
  };
});

// node_modules/cross-spawn/lib/util/readShebang.js
var ft = l((Le, dt) => {
  "use strict";
  var O = m("fs"), Qt = pt();
  function Zt(t) {
    let n = Buffer.alloc(150), r;
    try {
      r = O.openSync(t, "r"), O.readSync(r, n, 0, 150, 0), O.closeSync(r);
    } catch {
    }
    return Qt(n.toString());
  }
  dt.exports = Zt;
});

// node_modules/cross-spawn/lib/parse.js
var Et = l((je, gt) => {
  "use strict";
  var te = m("path"), mt = it(), ht = ct(), ee = ft(), ne = process.platform === "win32", re = /\.(?:com|exe)$/i, se = /node_modules[\\/].bin[\\/][^\\/]+\.cmd$/i;
  function oe(t) {
    t.file = mt(t);
    let e = t.file && ee(t.file);
    return e ? (t.args.unshift(t.file), t.command = e, mt(t)) : t.file;
  }
  function ie(t) {
    if (!ne)
      return t;
    let e = oe(t), n = !re.test(e);
    if (t.options.forceShell || n) {
      let r = se.test(e);
      t.command = te.normalize(t.command), t.command = ht.command(t.command), t.args = t.args.map((o) => ht.argument(o, r));
      let s = [t.command].concat(t.args).join(" ");
      t.args = ["/d", "/s", "/c", `"${s}"`], t.command = process.env.comspec || "cmd.exe", t.options.windowsVerbatimArguments = !0;
    }
    return t;
  }
  function ce(t, e, n) {
    e && !Array.isArray(e) && (n = e, e = null), e = e ? e.slice(0) : [], n = Object.assign({}, n);
    let r = {
      command: t,
      args: e,
      options: n,
      file: void 0,
      original: {
        command: t,
        args: e
      }
    };
    return n.shell ? r : ie(r);
  }
  gt.exports = ce;
});

// node_modules/cross-spawn/lib/enoent.js
var xt = l((Fe, wt) => {
  "use strict";
  var C = process.platform === "win32";
  function S(t, e) {
    return Object.assign(new Error(`${e} ${t.command} ENOENT`), {
      code: "ENOENT",
      errno: "ENOENT",
      syscall: `${e} ${t.command}`,
      path: t.command,
      spawnargs: t.args
    });
  }
  function ae(t, e) {
    if (!C)
      return;
    let n = t.emit;
    t.emit = function(r, s) {
      if (r === "exit") {
        let o = vt(s, e, "spawn");
        if (o)
          return n.call(t, "error", o);
      }
      return n.apply(t, arguments);
    };
  }
  function vt(t, e) {
    return C && t === 1 && !e.file ? S(e.original, "spawn") : null;
  }
  function ue(t, e) {
    return C && t === 1 && !e.file ? S(e.original, "spawnSync") : null;
  }
  wt.exports = {
    hookChildProcess: ae,
    verifyENOENT: vt,
    verifyENOENTSync: ue,
    notFoundError: S
  };
});

// node_modules/cross-spawn/index.js
var _t = l((He, E) => {
  "use strict";
  var bt = m("child_process"), k = Et(), T = xt();
  function yt(t, e, n) {
    let r = k(t, e, n), s = bt.spawn(r.command, r.args, r.options);
    return T.hookChildProcess(s, r), s;
  }
  function le(t, e, n) {
    let r = k(t, e, n), s = bt.spawnSync(r.command, r.args, r.options);
    return s.error = s.error || T.verifyENOENTSync(s.status, r), s;
  }
  E.exports = yt;
  E.exports.spawn = yt;
  E.exports.sync = le;
  E.exports._parse = k;
  E.exports._enoent = T;
});

// src/main.ts
import { spawn as pe } from "child_process";
import { normalize as de } from "path";
import { cwd as fe } from "process";

// src/env.ts
import {
  delimiter as $,
  resolve as Nt,
  dirname as qt
} from "path";
var It = /^path$/i, N = { key: "PATH", value: "" };
function Lt(t) {
  for (let e in t) {
    if (!Object.prototype.hasOwnProperty.call(t, e) || !It.test(e))
      continue;
    let n = t[e];
    return n ? { key: e, value: n } : N;
  }
  return N;
}
function jt(t, e) {
  let n = e.value.split($), r = t, s;
  do
    n.push(Nt(r, "node_modules", ".bin")), s = r, r = qt(r);
  while (r !== s);
  return { key: e.key, value: n.join($) };
}
function q(t, e) {
  let n = {
    ...process.env,
    ...e
  }, r = jt(t, Lt(n));
  return n[r.key] = r.value, n;
}

// src/stream.ts
import { PassThrough as Ft } from "stream";
var I = (t) => {
  let e = t.length, n = new Ft(), r = () => {
    --e === 0 && n.emit("end");
  };
  for (let s of t)
    s.pipe(n, { end: !1 }), s.on("end", r);
  return n;
};

// src/main.ts
var Pt = $t(_t(), 1);
import me from "readline";
var he = {
  timeout: void 0,
  persist: !1
}, ge = {
  windowsHide: !0
};
function Ee(t, e) {
  return {
    command: de(t),
    args: e ?? []
  };
}
function ve(t) {
  let e = new AbortController();
  for (let n of t) {
    if (n.aborted)
      return e.abort(), n;
    let r = () => {
      e.abort(n.reason);
    };
    n.addEventListener("abort", r, {
      signal: e.signal
    });
  }
  return e.signal;
}
var A = class {
  _process;
  _aborted = !1;
  _options;
  _command;
  _args;
  _resolveClose;
  _processClosed;
  _thrownError;
  get process() {
    return this._process;
  }
  get pid() {
    return this._process?.pid;
  }
  get exitCode() {
    if (this._process && this._process.exitCode !== null)
      return this._process.exitCode;
  }
  constructor(e, n, r) {
    this._options = {
      ...he,
      ...r
    }, this._command = e, this._args = n ?? [], this._processClosed = new Promise((s) => {
      this._resolveClose = s;
    });
  }
  kill(e) {
    return this._process?.kill(e) === !0;
  }
  get aborted() {
    return this._aborted;
  }
  get killed() {
    return this._process?.killed === !0;
  }
  pipe(e, n, r) {
    return xe(e, n, {
      ...r,
      stdin: this
    });
  }
  async *[Symbol.asyncIterator]() {
    let e = this._process;
    if (!e)
      return;
    let n = [];
    this._streamErr && n.push(this._streamErr), this._streamOut && n.push(this._streamOut);
    let r = I(n), s = me.createInterface({
      input: r
    });
    for await (let o of s)
      yield o.toString();
    if (await this._processClosed, e.removeAllListeners(), this._thrownError)
      throw this._thrownError;
  }
  async _waitForOutput() {
    let e = this._process;
    if (!e)
      throw new Error("No process was started");
    let n = "", r = "";
    if (this._streamErr)
      for await (let o of this._streamErr)
        n += o.toString();
    if (this._streamOut)
      for await (let o of this._streamOut)
        r += o.toString();
    if (await this._processClosed, this._options?.stdin && await this._options.stdin, e.removeAllListeners(), this._thrownError)
      throw this._thrownError;
    return {
      stderr: n,
      stdout: r
    };
  }
  then(e, n) {
    return this._waitForOutput().then(e, n);
  }
  _streamOut;
  _streamErr;
  spawn() {
    let e = fe(), n = this._options, r = {
      ...ge,
      ...n.nodeOptions
    }, s = [];
    this._resetState(), n.timeout !== void 0 && s.push(AbortSignal.timeout(n.timeout)), n.signal !== void 0 && s.push(n.signal), n.persist === !0 && (r.detached = !0), s.length > 0 && (r.signal = ve(s)), r.env = q(e, r.env);
    let { command: o, args: i } = Ee(this._command, this._args), u = (0, Pt._parse)(o, i, r), c = pe(
      u.command,
      u.args,
      u.options
    );
    if (c.stderr && (this._streamErr = c.stderr), c.stdout && (this._streamOut = c.stdout), this._process = c, c.once("error", this._onError), c.once("close", this._onClose), n.stdin !== void 0 && c.stdin && n.stdin.process) {
      let { stdout: a } = n.stdin.process;
      a && a.pipe(c.stdin);
    }
  }
  _resetState() {
    this._aborted = !1, this._processClosed = new Promise((e) => {
      this._resolveClose = e;
    }), this._thrownError = void 0;
  }
  _onError = (e) => {
    if (e.name === "AbortError" && (!(e.cause instanceof Error) || e.cause.name !== "TimeoutError")) {
      this._aborted = !0;
      return;
    }
    this._thrownError = e;
  };
  _onClose = () => {
    this._resolveClose && this._resolveClose();
  };
}, we = (t, e, n) => {
  let r = new A(t, e, n);
  return r.spawn(), r;
}, xe = we;
export {
  A as ExecProcess,
  xe as exec,
  we as x
};
