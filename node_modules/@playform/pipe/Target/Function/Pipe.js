var n=async(...[t,{Accomplished:r,Changed:o,Failed:f,Fulfilled:u,Passed:s,Read:O,Wrote:c}])=>{for(const[e,w]of t.Results){t.On.Input=w,t.On.Output=e;try{if(t.On.Before=(await a(t.On.Input)).size,O&&c){if(t.On.Buffer=await O(t.On),t.On.Buffer=await c(t.On),!t.On.Buffer)continue;if(s&&await s(t.On)){try{await(await import("fs/promises")).access(p(t.On.Output),(await import("fs/promises")).constants.W_OK)}catch{await(await import("fs/promises")).mkdir(p(t.On.Output),{recursive:!0})}await(await import("fs/promises")).writeFile(t.On.Output,t.On.Buffer,"utf-8"),t.On.After=(await a(t.On.Output)).size,t.Logger>0&&(t.File++,o&&(t=await o(t))),t.Logger>1&&typeof r=="function"&&console.log(await r(t.On))}}}catch(i){t.Results.delete(t.On.Output),t.Logger>1&&console.log(typeof f=="function"?await f(t.On,i):i)}}if(t.Logger>0&&t.Results.size>0&&typeof u=="function"){const e=await u(t);e&&e.length>0&&console.log(e)}return t};const{dirname:p}=await import("path"),{stat:a}=await import("fs/promises");export{n as default,p as dirname,a as stat};
