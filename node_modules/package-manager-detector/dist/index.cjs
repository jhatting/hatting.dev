'use strict';

const fs = require('node:fs');
const fsPromises = require('node:fs/promises');
const path = require('node:path');
const process = require('node:process');
const agents = require('./agents.cjs');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e.default : e; }

const fs__default = /*#__PURE__*/_interopDefaultCompat(fs);
const fsPromises__default = /*#__PURE__*/_interopDefaultCompat(fsPromises);
const path__default = /*#__PURE__*/_interopDefaultCompat(path);
const process__default = /*#__PURE__*/_interopDefaultCompat(process);

async function detect({ cwd, onUnknown } = {}) {
  let agent;
  let version;
  const lockPath = await findUp(Object.keys(agents.LOCKS), { cwd });
  let packageJsonPath;
  if (lockPath)
    packageJsonPath = path__default.resolve(lockPath, "../package.json");
  else
    packageJsonPath = await findUp("package.json", { cwd });
  if (packageJsonPath && fs__default.existsSync(packageJsonPath)) {
    try {
      const pkg = JSON.parse(fs__default.readFileSync(packageJsonPath, "utf8"));
      if (typeof pkg.packageManager === "string") {
        const [name, ver] = pkg.packageManager.replace(/^\^/, "").split("@");
        version = ver;
        if (name === "yarn" && Number.parseInt(ver) > 1) {
          agent = "yarn@berry";
          version = "berry";
        } else if (name === "pnpm" && Number.parseInt(ver) < 7) {
          agent = "pnpm@6";
        } else if (agents.AGENTS.includes(name)) {
          agent = name;
        } else {
          onUnknown?.(pkg.packageManager);
        }
      }
    } catch {
    }
  }
  if (!agent && lockPath)
    agent = agents.LOCKS[path__default.basename(lockPath)];
  return { agent, version };
}
async function findUp(name, { cwd }) {
  let directory = path__default.resolve(cwd ?? process__default.cwd());
  const { root } = path__default.parse(directory);
  const names = [name].flat();
  while (directory && directory !== root) {
    for (const name2 of names) {
      const filePath = path__default.join(directory, name2);
      try {
        const stats = await fsPromises__default.stat(filePath);
        if (stats.isFile()) {
          return filePath;
        }
      } catch {
      }
    }
    directory = path__default.dirname(directory);
  }
}

exports.AGENTS = agents.AGENTS;
exports.LOCKS = agents.LOCKS;
exports.detect = detect;
